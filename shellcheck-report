#!/usr/bin/env bash
# shellcheck disable=SC2034
#
# Reports *.sh shellcheck issues in folder and all subfolders
# Author: Igor P. Zenkov
# Dependency: https://www.shellcheck.net CLI
#

declare -r SCRIPT_NAME="${0##*/}"
declare -r SCRIPT_VERSION='1.0.5 Jan 22, 2022'
declare -r FGLOB='*.sh'
declare -r MAXDEPTH=64

function bold { printf '\e[96m%s\e[0m\n' "$*"; }
function err  { >&2 printf "%s: \e[91m%s\e[0m\n" "$SCRIPT_NAME" "$*"; }
function halt { err "$@"; exit 3; }

function assert_bash {
  local -r maj_exp=$1 # expected
  local -r maj_act="${BASH_VERSINFO[0]}" # actual
  ((maj_act>=maj_exp)) || halt "Bash $BASH_VERSION detected, please upgrade to version $maj_exp or newer"
}

function assert_shellcheck {
  shellcheck --help > /dev/null 2>&1 || halt 'shellcheck (www.shellcheck.net) not found'
}

function assert_dir {
  [[ -d $1 ]] || halt "folder '$1' not found"
}

function assert_cd {
  cd "$1" || halt "unable to chage folder to '$1'"
}

function assert_int {
  [[ "$1" =~ ^[0-9]+$ ]] || halt "'$1' is not a non-negative integer"
}

function set_parent_dir {
  local -n r_var=$1
  local -r dir=$PWD
  assert_dir "$2";
  assert_cd  "$2"
  case $PWD in
    '/') r_var='/';;
      *) r_var=${PWD##*/};;
  esac
  assert_cd "$dir"
}

# s=./:1 -> r_dir = ./ r_depth = 1
function parse_dir {
  local -n r_dir=$1 r_depth=$2
  local -a arr
  IFS=':' read -ra arr <<< "$3"
  case ${#arr[@]} in
    1) arr[1]=$MAXDEPTH;;
    2) assert_int "${arr[1]}";;
    *) halt "syntax error: $2";;
  esac
  r_dir=${arr[0]}; r_depth=${arr[1]};
}

function check_file {
  shellcheck -x -f gcc "$1" | wc -l
}

# report all
function report_a {
  local -r dir=$1 pdir=$2 depth=$3
  local -a scripts
  readarray -t scripts < <(find "$dir" -maxdepth "$3" -name "$FGLOB" -type f)
  local scr; local -i cnt total=0
  bold "$SCRIPT_NAME $SCRIPT_VERSION"
  echo
  echo "$pdir"
  echo
  for scr in "${scripts[@]}"; do
    cnt=$(check_file "$scr")
    printf '%3d %s\n' "$cnt" "$scr"
    ((total+=cnt))
  done
  echo
  echo "$total issues in ${#scripts[@]} $FGLOB files"
}

# report all excluding scripts with 0 errors
function report_0 {
  local -r dir=$1 pdir=$2 depth=$3
  local -a scripts
  readarray -t scripts < <(find "$dir" -maxdepth "$3" -name "$FGLOB" -type f)
  local scr; local -i cnt total=0 errcnt=0
  bold "$SCRIPT_NAME $SCRIPT_VERSION"
  echo
  echo "$pdir"
  echo
  for scr in "${scripts[@]}"; do
    cnt=$(check_file "$scr")
    if ((cnt!=0)); then
      printf '%3d %s\n' "$cnt" "$scr"
      ((errcnt++))
    fi
    ((total+=cnt))
  done
  echo
  echo "$total issues in $errcnt $FGLOB files"
}

# report total error count
function report_c {
  local -r dir=$1 pdir=$2 depth=$3
  local -a scripts
  readarray -t scripts < <(find "$dir" -maxdepth "$3" -name "$FGLOB" -type f)
  local scr; local -i cnt total=0
  for scr in "${scripts[@]}"; do
    cnt=$(check_file "$scr")
    ((total+=cnt))
  done
  echo "$total"
}

# quiet mode, return exit code
function report_q {
  local -r dir=$1 pdir=$2 depth=$3
  local -a scripts
  readarray -t scripts < <(find "$dir" -maxdepth "$3" -name "$FGLOB" -type f)
  local scr; local -i cnt total=0
  for scr in "${scripts[@]}"; do
    cnt=$(check_file "$scr")
    ((total+=cnt))
  done
  ((total==0)) || exit 1
}

# $1 dir, $2 options -0, -c, or -q
function report {
  assert_shellcheck
  local dir depth pdir
  parse_dir dir depth "$1"
  set_parent_dir pdir  "$dir"
  case $2 in
    -0) report_0 "$dir" "$pdir" "$depth";;
    -c) report_c "$dir" "$pdir" "$depth";;
    -q) report_q "$dir" "$pdir" "$depth";;
     *) report_a "$dir" "$pdir" "$depth";;
  esac
}

function usage {
  bold "$SCRIPT_NAME $SCRIPT_VERSION"
  echo
  bold ' Usage:'
  echo
  echo "  $SCRIPT_NAME <dir>[:<depth>]"
  echo "  $SCRIPT_NAME -0 <dir>[:<depth>]"
  echo "  $SCRIPT_NAME -c <dir>[:<depth>]"
  echo "  $SCRIPT_NAME -q <dir>[:<depth>]"
  echo "  $SCRIPT_NAME -v"
  echo "  $SCRIPT_NAME -h"
  echo
  bold ' Where:'
  echo
  echo '  <dir>    Folder to scan'
  echo "  <depth>  Scan depth (current folder: 1, default: $MAXDEPTH)"
  echo '  -0       Exclude 0 errors scripts'
  echo '  -c       Print error count'
  echo '  -q       Quiet, return exit code'
  echo '  -v       Version'
  echo '  -h       Help'
  echo
  (($#==0)) && return
  bold ' Like:'
  echo
  echo "  $SCRIPT_NAME .        scan . folder"
  echo "  $SCRIPT_NAME -0 .     scan . folder, exclude 0 errors scripts"
  echo "  $SCRIPT_NAME -c .     scan . folder, print total error count"
  echo "  $SCRIPT_NAME -q .     scan . folder, set exit code"
  echo "  $SCRIPT_NAME ./git    scan ./git folder"
  echo "  $SCRIPT_NAME ./git:1  scan ./git folder, one level deep"
  echo "  $SCRIPT_NAME ~/dev:2  scan ~/dev folder, two levels deep"
  echo
  bold ' Exit codes (-q option)'
  echo
  echo '  0: Folder scan completed, no issues found'
  echo '  1: Folder scan completed, issues found'
  echo '  3: Bad syntax or options'
  echo
}

function one_arg {
  case $1 in
    -0|-c|-q) halt 'missing <dir> argument';;
    -h) usage '-h';;
    -v) echo "$SCRIPT_VERSION";;
    -*) halt "unknown argument '$1'";;
     *) report "$1";;
  esac
}

function two_arg {
  case $1 in
    -0|-c|-q) report "$2" "$1";; # reverse arguments: <dir> <opt>
    *) halt "unknown argument '$1'";;
  esac
}

function main {
  assert_bash 4
  case $# in
    0) usage;;
    1) one_arg "$@";;
    2) two_arg "$@";;
    *) halt 'too many arguments';;
  esac
}

main "$@"
